{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","onClick","push","pathname","list","map","quote","NoQuotesFound","role","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,wFCiB5CC,EAfG,SAACC,GAEf,OACI,qBAAIC,UAAWC,IAAQC,KAAvB,UACI,mCACI,4BAAYF,UAAU,SAAtB,SACI,4BAAID,EAAMI,SAEd,qCAAaJ,EAAMK,YAEvB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,sBAA3C,sB,iBCiDGO,EA9CG,SAACR,GACf,IAXgBS,EAAQC,EAWlBC,EAAUC,cACVC,EAAWC,cAGXC,EAAiD,QADnC,IAAIC,gBAAgBH,EAASI,QACVC,IAAI,QACrCC,GAhBUV,EAgBgBT,EAAMS,OAhBdC,EAgBsBK,EAfvCN,EAAOW,MAAK,SAACC,EAAQC,GACxB,OAAIZ,EACOW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAoB5C,OACI,eAAC,WAAD,WACI,qBAAKN,UAAU,UAAf,SACI,wBACIsB,QAXa,WACzBZ,EAAQa,KAAK,CACTC,SAAUZ,EAASY,SACnBR,OAAO,SAAD,OAAWF,EAAqB,OAAS,UASvCd,UAAU,sCAFd,SAGKc,EACK,CACI,gDAAU,WACV,cAEJ,CACI,gDAAU,YACV,mBAIlB,oBAAId,UAAWC,IAAQwB,KAAvB,SACKP,EAAaQ,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAEIrB,GAAIqB,EAAMrB,GACVF,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAMrB,a,QClCpBsB,EAfO,WAClB,OACI,qBAAK5B,UAAU,gBAAf,SACI,sBAAKA,UAAU,mBAAmB6B,KAAK,QAAvC,UACI,oBAAI7B,UAAU,mBAAd,8BACA,cAAC,IAAD,CACIA,UAAU,eACVK,GAAG,aAFP,+B,gBCsCDyB,UAtCG,WACd,MAKIC,YAAQC,KAAc,GAJtBC,EADJ,EACIA,YACAC,EAFJ,EAEIA,OACMC,EAHV,EAGIC,KACAC,EAJJ,EAIIA,MAOJ,OAJAC,qBAAU,WACNL,MACD,CAACA,IAEW,YAAXC,EAEI,qBAAKlC,UAAU,gBAAf,SACI,cAACuC,EAAA,EAAD,MAKRF,EAEI,sBAAKrC,UAAU,qBAAqB6B,KAAK,QAAzC,UACI,oBAAI7B,UAAU,mBAAd,SAAkCqC,IADtC,oBAOO,cAAXH,GACEC,GAAwC,IAAxBA,EAAaK,OAK5B,cAAC,EAAD,CAAWhC,OAAQ2B,IAHf,cAAC,EAAD","file":"static/js/4.36adc54b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2ob9X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__2HaHd\",\"sorting\":\"QuoteList_sorting__3skwX\"};","import { Link } from 'react-router-dom'\nimport classes from './QuoteItem.module.css'\n\nconst QuoteItem = (props) => {\n\n    return (\n        <li className={classes.item}>\n            <figure>\n                <blockquote className='cinzel'>\n                    <p>{props.text}</p>\n                </blockquote>\n                <figcaption>{props.author}</figcaption>\n            </figure>\n            <Link to={`/quotes/${props.id}`} className='btn btn-sm btn-info'>View</Link>\n        </li>\n    )\n}\n\nexport default QuoteItem\n","import { Fragment } from 'react'\nimport { useHistory, useLocation } from 'react-router'\n\nimport QuoteItem from './QuoteItem'\nimport classes from './QuoteList.module.css'\n\nconst sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n        if (ascending) {\n            return quoteA.id > quoteB.id ? 1 : -1\n        } else {\n            return quoteA.id < quoteB.id ? 1 : -1\n        }\n    })\n}\n\nconst QuoteList = (props) => {\n    const history = useHistory()\n    const location = useLocation()\n\n    const queryParams = new URLSearchParams(location.search)\n    const isSortingAscending = queryParams.get('sort') === 'asc'\n    const sortedQuotes = sortQuotes(props.quotes, isSortingAscending)\n\n    const changeSortingHandler = () => {\n        history.push({\n            pathname: location.pathname,\n            search: `?sort=${isSortingAscending ? 'desc' : 'asc'}`\n        })\n    }\n\n    return (\n        <Fragment>\n            <div className='sorting'>\n                <button\n                    onClick={changeSortingHandler}\n                    className='btn btn-sm btn-outline-info ascdesc'>\n                    {isSortingAscending\n                        ? [\n                              <span key='spanAsc'>&#8595; &#8593;</span>,\n                              ' Ascending'\n                          ]\n                        : [\n                              <span key='spanDesc'>&#8593; &#8595;</span>,\n                              ' Descending'\n                          ]}\n                </button>\n            </div>\n            <ul className={classes.list}>\n                {sortedQuotes.map((quote) => (\n                    <QuoteItem\n                        key={quote.id}\n                        id={quote.id}\n                        author={quote.author}\n                        text={quote.text}\n                    />\n                ))}\n            </ul>\n        </Fragment>\n    )\n}\n\nexport default QuoteList\n","import { Link } from 'react-router-dom'\n\nconst NoQuotesFound = () => {\n    return (\n        <div className='noquotesfound'>\n            <div className='alert alert-info' role='alert'>\n                <h1 className='mt-0 mb-4 cinzel'>No quotes found!</h1>\n                <Link\n                    className='btn btn-info'\n                    to='/new-quote'>\n                    Add a Quote\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default NoQuotesFound\n","import { useEffect } from 'react'\r\nimport QuoteList from '../components/quotes/QuoteList'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getAllQuotes } from '../lib/api'\r\n\r\nconst AllQuotes = () => {\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuotes,\r\n        error\r\n    } = useHttp(getAllQuotes, true)\r\n\r\n    useEffect(() => {\r\n        sendRequest()\r\n    }, [sendRequest])\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='loadingquotes'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className='alert alert-danger' role='alert'>\r\n                <h1 className='mt-0 mb-2 cinzel'>{error}</h1>Check your URL\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (\r\n        status === 'completed' &&\r\n        (!loadedQuotes || loadedQuotes.length === 0)\r\n    ) {\r\n        return <NoQuotesFound />\r\n    }\r\n\r\n    return <QuoteList quotes={loadedQuotes} />\r\n}\r\n\r\nexport default AllQuotes\r\n"],"sourceRoot":""}