{"version":3,"sources":["components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","CommentItem","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","role","path","exact","to","url"],"mappings":"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","file":"static/js/6.8da95683.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3Wb8a\",\"loading\":\"NewCommentForm_loading__1ZrRo\",\"control\":\"NewCommentForm_control__1U85k\",\"actions\":\"NewCommentForm_actions__2GvEk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__DMUnX\"};","import { useRef, useEffect } from 'react'\nimport classes from './NewCommentForm.module.css'\nimport useHttp from '../../hooks/use-http'\nimport { addComment } from '../../lib/api'\nimport LoadingSpinner from '../../components/UI/LoadingSpinner'\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef()\n    const { sendRequest, status, error } = useHttp(addComment)\n    const { onAddedComment } = props\n\n    useEffect(() => {\n        if (status === 'completed' && !error) {\n            onAddedComment()\n        }\n    }, [status, error, onAddedComment])\n\n    const submitFormHandler = (event) => {\n        event.preventDefault()\n        const enteredText = commentTextRef.current.value\n\n        sendRequest({\n            commentData: { text: enteredText },\n            quoteId: props.quoteId\n        })\n\n        commentTextRef.current.value = ''\n    }\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && <LoadingSpinner />}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label className='cinzel mt-4' htmlFor='comment'>\n                    Your Comment\n                </label>\n                <textarea id='comment' rows='2' ref={commentTextRef}></textarea>\n            </div>\n            <div className='actions'>\n                <button className='btn btn-info btn-sm mt-2'>Add Comment</button>\n            </div>\n        </form>\n    )\n}\n\nexport default NewCommentForm\n","const CommentItem = (props) => {\n    return <li className='list-group-item'>{props.text}</li>\n}\n\nexport default CommentItem\n","import CommentItem from './CommentItem'\n\nconst CommentsList = (props) => {\n    return (\n        <ul className='list-group'>\n            {props.comments.map((comment) => (\n                <CommentItem key={comment.id} text={comment.text} />\n            ))}\n        </ul>\n    )\n}\n\nexport default CommentsList\n","import { useState, useEffect, useCallback } from 'react'\nimport NewCommentForm from './NewCommentForm'\nimport { useParams } from 'react-router-dom'\nimport useHttp from '../../hooks/use-http'\nimport { getAllComments } from '../../lib/api'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport CommentsList from './CommentsList'\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false)\n    const params = useParams()\n\n    const {\n        sendRequest,\n        status,\n        data: loadedComments\n    } = useHttp(getAllComments)\n\n    const { quoteId } = params\n\n    useEffect(() => {\n        sendRequest(quoteId)\n    }, [sendRequest, quoteId])\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true)\n    }\n\n    const addedCommentHandler = useCallback(() => {\n        sendRequest(quoteId)\n    }, [sendRequest, quoteId])\n\n    let comments\n    if (status === 'pending') {\n        comments = (\n            <div className='loadingcomments'>\n                <LoadingSpinner />\n            </div>\n        )\n    }\n\n    if (\n        status === 'completed' &&\n        (loadedComments || loadedComments.length > 0)\n    ) {\n        comments = <CommentsList comments={loadedComments} />\n    }\n\n    if (\n        status === 'completed' &&\n        (!loadedComments || loadedComments.length === 0)\n    ) {\n        comments = <p>No comments yet... Be the first to comment.</p>\n    }\n\n    return (\n        <section className='comments'>\n            <h5 className='cinzel'>User Comments</h5>\n            {comments}\n            {!isAddingComment && (\n                <button\n                    className='btn btn-sm btn-info mt-3'\n                    onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    quoteId={quoteId}\n                    onAddedComment={addedCommentHandler}\n                />\n            )}\n        </section>\n    )\n}\n\nexport default Comments\n","import classes from './HighlightedQuote.module.css'\n\nconst HighlightedQuote = (props) => {\n    return (\n        <figure className={classes.quote + ' cinzel'}>\n            <p>{props.text}</p>\n            <figcaption>{props.author}</figcaption>\n        </figure>\n    )\n}\n\nexport default HighlightedQuote\n","import { useEffect } from 'react'\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom'\r\nimport Comments from '../components/comments/Comments'\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getSingleQuote } from '../lib/api'\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams()\r\n    const match = useRouteMatch()\r\n    const { quoteId } = params\r\n\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuote,\r\n        error\r\n    } = useHttp(getSingleQuote, true)\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId)\r\n    }, [sendRequest, quoteId])\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='loadingquote'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className='alert alert-danger' role='alert'>\r\n                <h1 className='mt-0 mb-2 cinzel'>{error}</h1>Check your URL\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!loadedQuote) {\r\n        return (\r\n            <div className='noquotes'>\r\n                <h2>No quote found!</h2>\r\n                <p>Great Quotes</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='quotedetail'>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n            {/* This hides the button if the comments are visible */}\r\n            <Route path={match.path} exact>\r\n                {/* The button to comments itself gets hidden */}\r\n                <Link\r\n                    className='btn btn-sm btn-info'\r\n                    to={`${match.url}/comments`}>\r\n                    Load comments\r\n                </Link>\r\n            </Route>\r\n            {/* This shows the comments */}\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuoteDetail\r\n"],"sourceRoot":""}